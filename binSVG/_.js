// Generated by Haxe 3.4.0 (git build development @ 4a40be3)
(function () { "use strict";
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.hex = function(n,digits) {
	var s = "";
	while(true) {
		s = "0123456789ABCDEF".charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var htmlHelper_svg__$SvgRoot_SvgRoot_$Impl_$ = {};
htmlHelper_svg__$SvgRoot_SvgRoot_$Impl_$.__name__ = true;
htmlHelper_svg__$SvgRoot_SvgRoot_$Impl_$._new = function(e) {
	var this1;
	if(e == null) {
		var svgElement = window.document.createElementNS("http://www.w3.org/2000/svg","svg");
		var element = svgElement;
		var style = element.style;
		style.paddingLeft = "0px";
		style.paddingTop = "0px";
		style.left = Std.string(0 + "px");
		style.top = Std.string(0 + "px");
		style.position = "absolute";
		window.document.body.appendChild(element);
		this1 = svgElement;
	} else {
		this1 = e;
	}
	return this1;
};
htmlHelper_svg__$SvgRoot_SvgRoot_$Impl_$.create = function() {
	var svgElement = window.document.createElementNS("http://www.w3.org/2000/svg","svg");
	var element = svgElement;
	var style = element.style;
	style.paddingLeft = "0px";
	style.paddingTop = "0px";
	style.left = Std.string(0 + "px");
	style.top = Std.string(0 + "px");
	style.position = "absolute";
	window.document.body.appendChild(element);
	return svgElement;
};
htmlHelper_svg__$SvgRoot_SvgRoot_$Impl_$.set_width = function(this1,width_) {
	this1.setAttribute("width",width_ == null ? "null" : "" + width_);
	return width_;
};
htmlHelper_svg__$SvgRoot_SvgRoot_$Impl_$.get_width = function(this1) {
	return Std.parseInt(this1.getAttribute("width"));
};
htmlHelper_svg__$SvgRoot_SvgRoot_$Impl_$.set_height = function(this1,height_) {
	this1.setAttribute("height",height_ == null ? "null" : "" + height_);
	return height_;
};
htmlHelper_svg__$SvgRoot_SvgRoot_$Impl_$.get_height = function(this1) {
	return Std.parseInt(this1.getAttribute("height"));
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var justDrawing_Surface = function(graphics_) {
	this.inFill = false;
	this.prevY = 0;
	this.prevX = 0;
	this.graphics = graphics_;
	this.inFill = false;
	this.svgShapes = [];
};
justDrawing_Surface.__name__ = true;
justDrawing_Surface.getColor = function(col,alpha) {
	var str;
	if(alpha != null && alpha != 1.0) {
		str = "rgba(" + (col >> 16 & 255) + "," + (col >> 8 & 255) + "," + (col & 255) + "," + alpha + ")";
	} else {
		str = "#" + StringTools.hex(col,6);
	}
	return str;
};
justDrawing_Surface.arcTan = function(p0,p1) {
	return Math.atan2(p1.y - p0.y,p1.x - p0.x);
};
justDrawing_Surface.distance = function(p0,p1) {
	var x = p0.x - p1.x;
	var y = p0.y - p1.y;
	return Math.sqrt(x * x + y * y);
};
justDrawing_Surface.quadraticBezier = function(t,arr) {
	var u = 1 - t;
	var u1 = 1 - t;
	return { x : Math.pow(u,2) * arr[0].x + 2 * u * t * arr[1].x + Math.pow(t,2) * arr[2].x, y : Math.pow(u1,2) * arr[0].y + 2 * u1 * t * arr[1].y + Math.pow(t,2) * arr[2].y};
};
justDrawing_Surface._quadraticBezier = function(t,startPoint,controlPoint,endPoint) {
	var u = 1 - t;
	return Math.pow(u,2) * startPoint + 2 * u * t * controlPoint + Math.pow(t,2) * endPoint;
};
justDrawing_Surface.prototype = {
	repaint: function() {
		var _g = 0;
		var _g1 = this.svgShapes;
		while(_g < _g1.length) {
			var all = _g1[_g];
			++_g;
			this.graphics.appendChild(all);
		}
	}
	,remove: function(element) {
		if(!this.graphics.hasChildNodes()) {
			return;
		}
		this.graphics.removeChild(element);
	}
	,clear: function() {
		while(this.svgShapes.length != 0) this.remove(this.svgShapes.pop());
	}
	,lineStyle: function(thick,color,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
		this.thickness = thick;
		this.lineColor = color;
		this.lineAlpha = alpha;
	}
	,beginFill: function(color,alpha) {
		this.fillColor = color;
		this.fillAlpha = alpha;
		this.inFill = true;
	}
	,endFill: function() {
		this.inFill = false;
	}
	,moveTo: function(x,y) {
		this.prevX = x;
		this.prevY = y;
	}
	,lineTo: function(x,y) {
		var aLine = window.document.createElementNS("http://www.w3.org/2000/svg","line");
		aLine.setAttribute("x1",Std.string(this.prevX));
		aLine.setAttribute("y1",Std.string(this.prevY));
		aLine.setAttribute("x2",x == null ? "null" : "" + x);
		aLine.setAttribute("y2",y == null ? "null" : "" + y);
		var col = this.lineColor;
		var alpha = this.lineAlpha;
		var str;
		if(alpha != null && alpha != 1.0) {
			str = "rgba(" + (col >> 16 & 255) + "," + (col >> 8 & 255) + "," + (col & 255) + "," + alpha + ")";
		} else {
			str = "#" + StringTools.hex(col,6);
		}
		aLine.setAttribute("stroke",str);
		aLine.setAttribute("stroke-width",Std.string(this.thickness));
		this.graphics.appendChild(aLine);
		this.svgShapes.push(aLine);
		this.prevX = x;
		this.prevY = y;
	}
	,quadTo: function(cx,cy,ax,ay) {
		var p0 = { x : this.prevX, y : this.prevY};
		var p1 = { x : cx, y : cy};
		var p2 = { x : ax, y : ay};
		var x = p0.x - p1.x;
		var y = p0.y - p1.y;
		var x1 = p1.x - p2.x;
		var y1 = p1.y - p2.y;
		var approxDistance = Math.sqrt(x * x + y * y) + Math.sqrt(x1 * x1 + y1 * y1);
		var v;
		if(approxDistance == 0) {
			approxDistance = 0.000001;
		}
		var step = Math.min(1 / (approxDistance * 0.707),0.2);
		var t = 0.0;
		v = { x : Math.pow(1.,2) * p0.x + 0. * p1.x + Math.pow(0.0,2) * p2.x, y : Math.pow(1.,2) * p0.y + 0. * p1.y + Math.pow(0.0,2) * p2.y};
		this.lineTo(v.x,v.y);
		t = step;
		while(t < 1) {
			var u = 1 - t;
			var u1 = 1 - t;
			v = { x : Math.pow(u,2) * p0.x + 2 * u * t * p1.x + Math.pow(t,2) * p2.x, y : Math.pow(u1,2) * p0.y + 2 * u1 * t * p1.y + Math.pow(t,2) * p2.y};
			this.lineTo(v.x,v.y);
			t += step;
		}
		v = { x : Math.pow(0.,2) * p0.x + 0. * p1.x + Math.pow(1.0,2) * p2.x, y : Math.pow(0.,2) * p0.y + 0. * p1.y + Math.pow(1.0,2) * p2.y};
		this.lineTo(v.x,v.y);
	}
	,drawCircle: function(cx,cy,radius) {
		var svgCircle = window.document.createElementNS("http://www.w3.org/2000/svg","circle");
		svgCircle.setAttribute("cx",cx == null ? "null" : "" + cx);
		svgCircle.setAttribute("cy",cy == null ? "null" : "" + cy);
		svgCircle.setAttribute("r",radius == null ? "null" : "" + radius);
		if(this.inFill) {
			var col = this.fillColor;
			var alpha = this.fillAlpha;
			var str;
			if(alpha != null && alpha != 1.0) {
				str = "rgba(" + (col >> 16 & 255) + "," + (col >> 8 & 255) + "," + (col & 255) + "," + alpha + ")";
			} else {
				str = "#" + StringTools.hex(col,6);
			}
			svgCircle.setAttribute("fill",str);
		}
		var col1 = this.lineColor;
		var alpha1 = this.lineAlpha;
		var str1;
		if(alpha1 != null && alpha1 != 1.0) {
			str1 = "rgba(" + (col1 >> 16 & 255) + "," + (col1 >> 8 & 255) + "," + (col1 & 255) + "," + alpha1 + ")";
		} else {
			str1 = "#" + StringTools.hex(col1,6);
		}
		svgCircle.setAttribute("stroke",str1);
		svgCircle.setAttribute("stroke-width",Std.string(this.thickness));
		this.graphics.appendChild(svgCircle);
		this.svgShapes.push(svgCircle);
	}
	,drawRect: function(x,y,width,height) {
		var svgRect = window.document.createElementNS("http://www.w3.org/2000/svg","rect");
		svgRect.setAttribute("x",x == null ? "null" : "" + x);
		svgRect.setAttribute("y",y == null ? "null" : "" + y);
		svgRect.setAttribute("width",width == null ? "null" : "" + width);
		svgRect.setAttribute("height",height == null ? "null" : "" + height);
		if(this.inFill) {
			var col = this.fillColor;
			var alpha = this.fillAlpha;
			var str;
			if(alpha != null && alpha != 1.0) {
				str = "rgba(" + (col >> 16 & 255) + "," + (col >> 8 & 255) + "," + (col & 255) + "," + alpha + ")";
			} else {
				str = "#" + StringTools.hex(col,6);
			}
			svgRect.setAttribute("fill",str);
		}
		var col1 = this.lineColor;
		var alpha1 = this.lineAlpha;
		var str1;
		if(alpha1 != null && alpha1 != 1.0) {
			str1 = "rgba(" + (col1 >> 16 & 255) + "," + (col1 >> 8 & 255) + "," + (col1 & 255) + "," + alpha1 + ")";
		} else {
			str1 = "#" + StringTools.hex(col1,6);
		}
		svgRect.setAttribute("stroke",str1);
		svgRect.setAttribute("stroke-width",Std.string(this.thickness));
		this.graphics.appendChild(svgRect);
		this.svgShapes.push(svgRect);
	}
	,drawEquilaterialTri: function(x,y,radius,direction) {
		var third = Math.PI * 2 / 3;
		var points = [];
		var x1;
		var y1;
		var _g = 0;
		while(_g < 3) {
			var i = _g++;
			x1 = x + radius * Math.cos(direction + i * third);
			y1 = y + radius * Math.sin(direction + i * third);
			points.push(x1);
			points.push(y1);
		}
		this.drawTri(points);
	}
	,drawTri: function(points) {
		var aTri = window.document.createElementNS("http://www.w3.org/2000/svg","polygon");
		var pointsStr = "";
		var x1;
		var y1;
		var i = 0;
		while(i < points.length) {
			pointsStr += Std.string(points[i]) + "," + Std.string(points[i + 1]) + " ";
			i += 2;
		}
		aTri.setAttribute("points",pointsStr);
		if(this.inFill) {
			var col = this.fillColor;
			var alpha = this.fillAlpha;
			var str;
			if(alpha != null && alpha != 1.0) {
				str = "rgba(" + (col >> 16 & 255) + "," + (col >> 8 & 255) + "," + (col & 255) + "," + alpha + ")";
			} else {
				str = "#" + StringTools.hex(col,6);
			}
			aTri.setAttribute("fill",str);
		}
		var col1 = this.lineColor;
		var alpha1 = this.lineAlpha;
		var str1;
		if(alpha1 != null && alpha1 != 1.0) {
			str1 = "rgba(" + (col1 >> 16 & 255) + "," + (col1 >> 8 & 255) + "," + (col1 & 255) + "," + alpha1 + ")";
		} else {
			str1 = "#" + StringTools.hex(col1,6);
		}
		aTri.setAttribute("stroke",str1);
		aTri.setAttribute("stroke-width",Std.string(this.thickness));
		this.graphics.appendChild(aTri);
		this.svgShapes.push(aTri);
	}
};
var testjustDrawing_Draw = function() { };
testjustDrawing_Draw.__name__ = true;
testjustDrawing_Draw.testing = function(surface) {
	console.log("draw white background");
	surface.beginFill(16777215,1.);
	surface.lineStyle(2.,16711680,1.);
	surface.drawRect(1,1,1022,766);
	surface.endFill();
	console.log("draw red circle with a blue outline");
	surface.beginFill(16711680,1.);
	surface.lineStyle(2.,255,1.);
	surface.drawCircle(100,100,30);
	surface.endFill();
	console.log("draw a yellow equilateral triangle with green outline");
	surface.beginFill(16776960,1.);
	surface.lineStyle(2.,65280,1.);
	surface.drawEquilaterialTri(300,100,30,-Math.PI / 2);
	surface.endFill();
	console.log("draw a purple rectangle with orange outline");
	surface.beginFill(5577355,1.);
	surface.lineStyle(2.,16753920,1.);
	surface.drawRect(70,270,60,60);
	surface.endFill();
	console.log("heart quadratic curves");
	surface.beginFill(12702216,1.);
	surface.lineStyle(5.,3464669,1.);
	surface.moveTo(273,280);
	surface.quadTo(285,270,300,285);
	surface.quadTo(315,270,327,280);
	surface.quadTo(334,295,320,306);
	surface.quadTo(325,300,300,330);
	surface.quadTo(275,300,280,306);
	surface.quadTo(266,295,272,280);
	surface.endFill();
};
testjustDrawing_Draw.whiteBackground = function(surface) {
	console.log("draw white background");
	surface.beginFill(16777215,1.);
	surface.lineStyle(2.,16711680,1.);
	surface.drawRect(1,1,1022,766);
	surface.endFill();
};
testjustDrawing_Draw.redCircleBlueOutline = function(surface) {
	console.log("draw red circle with a blue outline");
	surface.beginFill(16711680,1.);
	surface.lineStyle(2.,255,1.);
	surface.drawCircle(100,100,30);
	surface.endFill();
};
testjustDrawing_Draw.yellowEquilateralTriangleGreenOutline = function(surface) {
	console.log("draw a yellow equilateral triangle with green outline");
	surface.beginFill(16776960,1.);
	surface.lineStyle(2.,65280,1.);
	surface.drawEquilaterialTri(300,100,30,-Math.PI / 2);
	surface.endFill();
};
testjustDrawing_Draw.purpleRectangleOrangeOutline = function(surface) {
	console.log("draw a purple rectangle with orange outline");
	surface.beginFill(5577355,1.);
	surface.lineStyle(2.,16753920,1.);
	surface.drawRect(70,270,60,60);
	surface.endFill();
};
testjustDrawing_Draw.heart = function(surface) {
	console.log("heart quadratic curves");
	surface.beginFill(12702216,1.);
	surface.lineStyle(5.,3464669,1.);
	surface.moveTo(273,280);
	surface.quadTo(285,270,300,285);
	surface.quadTo(315,270,327,280);
	surface.quadTo(334,295,320,306);
	surface.quadTo(325,300,300,330);
	surface.quadTo(275,300,280,306);
	surface.quadTo(266,295,272,280);
	surface.endFill();
};
var testjustDrawing_MainSVG = function() {
	var this1;
	var svgElement = window.document.createElementNS("http://www.w3.org/2000/svg","svg");
	var element = svgElement;
	var style = element.style;
	style.paddingLeft = "0px";
	style.paddingTop = "0px";
	style.left = Std.string(0 + "px");
	style.top = Std.string(0 + "px");
	style.position = "absolute";
	window.document.body.appendChild(element);
	this1 = svgElement;
	var svgRoot = this1;
	svgRoot.setAttribute("width","1024");
	svgRoot.setAttribute("height","768");
	testjustDrawing_Draw.testing(new justDrawing_Surface(svgRoot));
};
testjustDrawing_MainSVG.__name__ = true;
testjustDrawing_MainSVG.main = function() {
	new testjustDrawing_MainSVG();
};
String.__name__ = true;
Array.__name__ = true;
htmlHelper_svg__$SvgRoot_SvgRoot_$Impl_$.svgNameSpace = "http://www.w3.org/2000/svg";
justDrawing_Surface.svgNameSpace = "http://www.w3.org/2000/svg";
testjustDrawing_Draw.fillAlpha = 1.;
testjustDrawing_Draw.lineAlpha = 1.;
testjustDrawing_MainSVG.main();
})();
