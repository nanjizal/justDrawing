// Generated by Haxe 3.4.0 (git build development @ 4a40be3)
(function () { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
var Std = function() { };
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringTools = function() { };
StringTools.hex = function(n,digits) {
	var s = "";
	while(true) {
		s = "0123456789ABCDEF".charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var htmlHelper_canvas__$CanvasWrapper_CanvasWrapper_$Impl_$ = {};
htmlHelper_canvas__$CanvasWrapper_CanvasWrapper_$Impl_$._new = function(e) {
	var this1;
	if(e == null) {
		var canvas = window.document.createElement("canvas");
		var style = canvas.style;
		style.paddingLeft = "0px";
		style.paddingTop = "0px";
		style.left = "0px";
		style.top = "0px";
		style.position = "absolute";
		this1 = canvas;
	} else {
		this1 = e;
	}
	return this1;
};
htmlHelper_canvas__$CanvasWrapper_CanvasWrapper_$Impl_$.create = function() {
	var canvas = window.document.createElement("canvas");
	var style = canvas.style;
	style.paddingLeft = "0px";
	style.paddingTop = "0px";
	style.left = "0px";
	style.top = "0px";
	style.position = "absolute";
	return canvas;
};
htmlHelper_canvas__$CanvasWrapper_CanvasWrapper_$Impl_$.set_x = function(this1,x_) {
	this1.style.left = (x_ == null ? "null" : "" + x_) + "px";
	return x_;
};
htmlHelper_canvas__$CanvasWrapper_CanvasWrapper_$Impl_$.get_x = function(this1) {
	var style = this1.style;
	return Std.parseInt(style.left.substr(0,style.left.length - 2));
};
htmlHelper_canvas__$CanvasWrapper_CanvasWrapper_$Impl_$.set_y = function(this1,y_) {
	this1.style.left = (y_ == null ? "null" : "" + y_) + "px";
	return y_;
};
htmlHelper_canvas__$CanvasWrapper_CanvasWrapper_$Impl_$.get_y = function(this1) {
	var style = this1.style;
	return Std.parseInt(style.top.substr(0,style.top.length - 2));
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var justDrawing_Surface = function(graphics_) {
	this.inFill = false;
	this.prevY = 0;
	this.prevX = 0;
	this.graphics = graphics_;
	this.inFill = false;
};
justDrawing_Surface.getColor = function(col,alpha) {
	var str;
	if(alpha != null && alpha != 1.0) {
		str = "rgba(" + (col >> 16 & 255) + "," + (col >> 8 & 255) + "," + (col & 255) + "," + alpha + ")";
	} else {
		str = "#" + StringTools.hex(col,6);
	}
	return str;
};
justDrawing_Surface.arcTan = function(p0,p1) {
	return Math.atan2(p1.y - p0.y,p1.x - p0.x);
};
justDrawing_Surface.distance = function(p0,p1) {
	var x = p0.x - p1.x;
	var y = p0.y - p1.y;
	return Math.sqrt(x * x + y * y);
};
justDrawing_Surface.quadraticBezier = function(t,arr) {
	var u = 1 - t;
	var u1 = 1 - t;
	return { x : Math.pow(u,2) * arr[0].x + 2 * u * t * arr[1].x + Math.pow(t,2) * arr[2].x, y : Math.pow(u1,2) * arr[0].y + 2 * u1 * t * arr[1].y + Math.pow(t,2) * arr[2].y};
};
justDrawing_Surface._quadraticBezier = function(t,startPoint,controlPoint,endPoint) {
	var u = 1 - t;
	return Math.pow(u,2) * startPoint + 2 * u * t * controlPoint + Math.pow(t,2) * endPoint;
};
justDrawing_Surface.cubicBezier = function(t,arr) {
	var u = 1 - t;
	var u1 = 1 - t;
	return { x : Math.pow(u,3) * arr[0].x + 3 * Math.pow(u,2) * t * arr[1].x + 3 * u * Math.pow(t,2) * arr[2].x + Math.pow(t,3) * arr[3].x, y : Math.pow(u1,3) * arr[0].y + 3 * Math.pow(u1,2) * t * arr[1].y + 3 * u1 * Math.pow(t,2) * arr[2].y + Math.pow(t,3) * arr[3].y};
};
justDrawing_Surface._cubicBezier = function(t,startPoint,controlPoint1,controlPoint2,endPoint) {
	var u = 1 - t;
	return Math.pow(u,3) * startPoint + 3 * Math.pow(u,2) * t * controlPoint1 + 3 * u * Math.pow(t,2) * controlPoint2 + Math.pow(t,3) * endPoint;
};
justDrawing_Surface.prototype = {
	clear: function() {
		this.graphics.clearRect(0,0,this.width,this.height);
	}
	,lineStyle: function(thick,color,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
		this.thickness = thick;
		this.lineColor = color;
		this.lineAlpha = alpha;
		this.graphics.lineWidth = thick;
		var col = this.lineColor;
		var alpha1 = this.lineAlpha;
		var str;
		if(alpha1 != null && alpha1 != 1.0) {
			str = "rgba(" + (col >> 16 & 255) + "," + (col >> 8 & 255) + "," + (col & 255) + "," + alpha1 + ")";
		} else {
			str = "#" + StringTools.hex(col,6);
		}
		this.graphics.strokeStyle = str;
	}
	,beginFill: function(color,alpha) {
		this.fillColor = color;
		this.fillAlpha = alpha;
		this.inFill = true;
		var col = this.fillColor;
		var alpha1 = this.fillAlpha;
		var str;
		if(alpha1 != null && alpha1 != 1.0) {
			str = "rgba(" + (col >> 16 & 255) + "," + (col >> 8 & 255) + "," + (col & 255) + "," + alpha1 + ")";
		} else {
			str = "#" + StringTools.hex(col,6);
		}
		this.graphics.fillStyle = str;
		this.graphics.beginPath();
	}
	,endFill: function() {
		this.inFill = false;
		this.graphics.stroke();
		this.graphics.closePath();
		this.graphics.fill();
	}
	,moveTo: function(x,y) {
		this.prevX = x;
		this.prevY = y;
		this.graphics.beginPath();
		this.graphics.moveTo(x,y);
	}
	,lineTo: function(x,y) {
		this.graphics.lineTo(x,y);
		this.graphics.stroke();
		this.prevX = x;
		this.prevY = y;
	}
	,curveTo: function(x1,y1,x2,y2,x3,y3) {
		this.graphics.bezierCurveTo(x1,y1,x2,y2,x3,y3);
		this.graphics.stroke();
	}
	,quadTo: function(cx,cy,ax,ay) {
		this.graphics.quadraticCurveTo(cx,cy,ax,ay);
		this.graphics.stroke();
	}
	,drawCircle: function(cx,cy,radius) {
		this.graphics.beginPath();
		this.graphics.arc(cx,cy,radius,0,2 * Math.PI,false);
		this.graphics.stroke();
		this.graphics.closePath();
	}
	,drawRect: function(x,y,width,height) {
		this.graphics.beginPath();
		this.graphics.moveTo(x,y);
		this.graphics.lineTo(x + width,y);
		this.graphics.lineTo(x + width,y + height);
		this.graphics.lineTo(x,y + height);
		this.graphics.stroke();
		this.graphics.closePath();
	}
	,drawEquilaterialTri: function(x,y,radius,direction) {
		var third = Math.PI * 2 / 3;
		var points = [];
		var x1;
		var y1;
		var _g = 0;
		while(_g < 3) {
			var i = _g++;
			x1 = x + radius * Math.cos(direction + i * third);
			y1 = y + radius * Math.sin(direction + i * third);
			points.push(x1);
			points.push(y1);
		}
		this.drawTri(points);
	}
	,drawTri: function(points) {
		this.graphics.beginPath();
		var i = 0;
		while(i < points.length) {
			if(i == 0) {
				this.graphics.moveTo(points[i],points[i + 1]);
			} else {
				this.graphics.lineTo(points[i],points[i + 1]);
			}
			i += 2;
		}
		this.graphics.stroke();
		this.graphics.closePath();
	}
};
var justDrawing_justPath_IPathContext = function() { };
var justDrawing_justPath_StoreF6 = function() {
	this.count = 0;
	this.l = 0;
};
justDrawing_justPath_StoreF6.prototype = {
	clear: function() {
		this.l = 0;
		this.s0 = null;
		this.s1 = null;
		this.s2 = null;
		this.s3 = null;
		this.s4 = null;
		this.s5 = null;
	}
	,length: function() {
		return this.l;
	}
	,push: function(v) {
		switch(this.l) {
		case 0:
			this.s0 = v;
			break;
		case 1:
			this.s1 = v;
			break;
		case 2:
			this.s2 = v;
			break;
		case 3:
			this.s3 = v;
			break;
		case 4:
			this.s4 = v;
			break;
		case 5:
			this.s5 = v;
			break;
		default:
		}
		this.l++;
	}
	,pop: function() {
		var out = null;
		switch(this.l) {
		case 0:
			out = this.s0;
			this.s0 = null;
			break;
		case 1:
			out = this.s1;
			this.s1 = null;
			break;
		case 2:
			out = this.s2;
			this.s2 = null;
			break;
		case 3:
			out = this.s3;
			this.s3 = null;
			break;
		case 4:
			out = this.s4;
			this.s4 = null;
			break;
		case 5:
			out = this.s5;
			this.s5 = null;
			break;
		default:
		}
		this.l--;
		return out;
	}
	,unshift: function(v) {
		this.s5 = this.s4;
		this.s4 = this.s3;
		this.s3 = this.s2;
		this.s2 = this.s1;
		this.s0 = v;
		this.l++;
	}
	,shift: function() {
		var out = this.s0;
		if(this.l != 0) {
			this.s0 = this.s1;
			this.s1 = this.s2;
			this.s2 = this.s3;
			this.s3 = this.s4;
			this.s4 = this.s5;
			this.s5 = null;
			this.l--;
		}
		return out;
	}
	,toString: function() {
		return "" + this.s0 + ", " + this.s1 + ", " + this.s2 + ", " + this.s3 + ", " + this.s4 + ", " + this.s5;
	}
	,populatedToString: function() {
		var out = "";
		switch(this.l - 1) {
		case 0:
			out = "" + this.s0;
			break;
		case 1:
			out = "" + this.s0 + ", " + this.s1;
			break;
		case 2:
			out = "" + this.s0 + ", " + this.s1 + ", " + this.s2;
			break;
		case 3:
			out = "" + this.s0 + ", " + this.s1 + ", " + this.s2 + ", " + this.s3;
			break;
		case 4:
			out = "" + this.s0 + ", " + this.s1 + ", " + this.s2 + ", " + this.s3 + ", " + this.s4;
			break;
		case 5:
			out = "" + this.s0 + ", " + this.s1 + ", " + this.s2 + ", " + this.s3 + ", " + this.s4 + ", " + this.s5;
			break;
		default:
		}
		return out;
	}
	,hasNext: function() {
		return this.count < this.l + 1;
	}
	,resetIterator: function() {
		this.count = 0;
	}
	,next: function() {
		var out = null;
		switch(this.count) {
		case 0:
			out = this.s0;
			break;
		case 1:
			out = this.s1;
			break;
		case 2:
			out = this.s2;
			break;
		case 3:
			out = this.s3;
			break;
		case 4:
			out = this.s4;
			break;
		case 5:
			out = this.s5;
			break;
		default:
		}
		this.count++;
		return out;
	}
	,first: function() {
		return this.s0;
	}
	,last: function() {
		var out = null;
		switch(this.l) {
		case 0:
			out = this.s0;
			break;
		case 1:
			out = this.s1;
			break;
		case 2:
			out = this.s2;
			break;
		case 3:
			out = this.s3;
			break;
		case 4:
			out = this.s4;
			break;
		case 5:
			out = this.s5;
			break;
		default:
		}
		return out;
	}
	,penultimate: function() {
		var out = null;
		switch(this.l - 1) {
		case 0:
			out = this.s0;
			break;
		case 1:
			out = this.s1;
			break;
		case 2:
			out = this.s2;
			break;
		case 3:
			out = this.s3;
			break;
		case 4:
			out = this.s4;
			break;
		case 5:
			out = this.s5;
			break;
		default:
		}
		return out;
	}
	,toArray: function() {
		var arr = [];
		this.count = 0;
		var _g = this;
		while(_g.count < _g.l + 1) {
			var out = null;
			switch(_g.count) {
			case 0:
				out = _g.s0;
				break;
			case 1:
				out = _g.s1;
				break;
			case 2:
				out = _g.s2;
				break;
			case 3:
				out = _g.s3;
				break;
			case 4:
				out = _g.s4;
				break;
			case 5:
				out = _g.s5;
				break;
			default:
			}
			_g.count++;
			arr.push(out);
		}
	}
};
var justDrawing_justPath_StoreF8 = function() {
	this.count = 0;
	this.l = 0;
};
justDrawing_justPath_StoreF8.prototype = {
	clear: function() {
		this.l = 0;
		this.s0 = null;
		this.s1 = null;
		this.s2 = null;
		this.s3 = null;
		this.s4 = null;
		this.s5 = null;
		this.s6 = null;
		this.s7 = null;
	}
	,length: function() {
		return this.l;
	}
	,push: function(v) {
		switch(this.l) {
		case 0:
			this.s0 = v;
			break;
		case 1:
			this.s1 = v;
			break;
		case 2:
			this.s2 = v;
			break;
		case 3:
			this.s3 = v;
			break;
		case 4:
			this.s4 = v;
			break;
		case 5:
			this.s5 = v;
			break;
		case 6:
			this.s6 = v;
			break;
		case 7:
			this.s7 = v;
			break;
		default:
		}
		this.l++;
	}
	,pop: function() {
		var out = null;
		switch(this.l) {
		case 0:
			out = this.s0;
			this.s0 = null;
			break;
		case 1:
			out = this.s1;
			this.s1 = null;
			break;
		case 2:
			out = this.s2;
			this.s2 = null;
			break;
		case 3:
			out = this.s3;
			this.s3 = null;
			break;
		case 4:
			out = this.s4;
			this.s4 = null;
			break;
		case 5:
			out = this.s5;
			this.s5 = null;
			break;
		case 6:
			out = this.s6;
			this.s6 = null;
			break;
		case 7:
			out = this.s7;
			this.s6 = null;
			break;
		default:
		}
		this.l--;
		return out;
	}
	,unshift: function(v) {
		this.s7 = this.s6;
		this.s6 = this.s5;
		this.s5 = this.s4;
		this.s4 = this.s3;
		this.s3 = this.s2;
		this.s2 = this.s1;
		this.s0 = v;
		this.l++;
	}
	,shift: function() {
		var out = this.s0;
		if(this.l != 0) {
			this.s0 = this.s1;
			this.s1 = this.s2;
			this.s2 = this.s3;
			this.s3 = this.s4;
			this.s4 = this.s5;
			this.s5 = this.s6;
			this.s6 = this.s7;
			this.s7 = null;
			this.l--;
		}
		return out;
	}
	,toString: function() {
		return "" + this.s0 + ", " + this.s1 + ", " + this.s2 + ", " + this.s3 + ", " + this.s4 + ", " + this.s5 + ", " + this.s6 + ", " + this.s7;
	}
	,populatedToString: function() {
		var out = "";
		switch(this.l - 1) {
		case 0:
			out = "" + this.s0;
			break;
		case 1:
			out = "" + this.s0 + ", " + this.s1;
			break;
		case 2:
			out = "" + this.s0 + ", " + this.s1 + ", " + this.s2;
			break;
		case 3:
			out = "" + this.s0 + ", " + this.s1 + ", " + this.s2 + ", " + this.s3;
			break;
		case 4:
			out = "" + this.s0 + ", " + this.s1 + ", " + this.s2 + ", " + this.s3 + ", " + this.s4;
			break;
		case 5:
			out = "" + this.s0 + ", " + this.s1 + ", " + this.s2 + ", " + this.s3 + ", " + this.s4 + ", " + this.s5;
			break;
		case 6:
			out = "" + this.s0 + ", " + this.s1 + ", " + this.s2 + ", " + this.s3 + ", " + this.s4 + ", " + this.s5 + ", " + this.s6;
			break;
		case 7:
			out = "" + this.s0 + ", " + this.s1 + ", " + this.s2 + ", " + this.s3 + ", " + this.s4 + ", " + this.s5 + ", " + this.s6 + ", " + this.s7;
			break;
		default:
		}
		return out;
	}
	,hasNext: function() {
		return this.count < this.l + 1;
	}
	,resetIterator: function() {
		this.count = 0;
	}
	,next: function() {
		var out = null;
		switch(this.count) {
		case 0:
			out = this.s0;
			break;
		case 1:
			out = this.s1;
			break;
		case 2:
			out = this.s2;
			break;
		case 3:
			out = this.s3;
			break;
		case 4:
			out = this.s4;
			break;
		case 5:
			out = this.s5;
			break;
		case 6:
			out = this.s6;
			break;
		case 7:
			out = this.s7;
			break;
		default:
		}
		this.count++;
		return out;
	}
	,first: function() {
		return this.s0;
	}
	,last: function() {
		var out = null;
		switch(this.l) {
		case 0:
			out = this.s0;
			break;
		case 1:
			out = this.s1;
			break;
		case 2:
			out = this.s2;
			break;
		case 3:
			out = this.s3;
			break;
		case 4:
			out = this.s4;
			break;
		case 5:
			out = this.s5;
			break;
		case 6:
			out = this.s6;
			break;
		case 7:
			out = this.s7;
			break;
		default:
		}
		return out;
	}
	,penultimate: function() {
		var out = null;
		switch(this.l - 1) {
		case 0:
			out = this.s0;
			break;
		case 1:
			out = this.s1;
			break;
		case 2:
			out = this.s2;
			break;
		case 3:
			out = this.s3;
			break;
		case 4:
			out = this.s4;
			break;
		case 5:
			out = this.s5;
			break;
		case 6:
			out = this.s6;
			break;
		case 7:
			out = this.s7;
			break;
		default:
		}
		return out;
	}
	,toArray: function() {
		var arr = [];
		this.count = 0;
		var _g = this;
		while(_g.count < _g.l + 1) {
			var out = null;
			switch(_g.count) {
			case 0:
				out = _g.s0;
				break;
			case 1:
				out = _g.s1;
				break;
			case 2:
				out = _g.s2;
				break;
			case 3:
				out = _g.s3;
				break;
			case 4:
				out = _g.s4;
				break;
			case 5:
				out = _g.s5;
				break;
			case 6:
				out = _g.s6;
				break;
			case 7:
				out = _g.s7;
				break;
			default:
			}
			_g.count++;
			arr.push(out);
		}
	}
};
var justDrawing_justPath_SurfaceContext = function(surface_) {
	this.surface = surface_;
};
justDrawing_justPath_SurfaceContext.__interfaces__ = [justDrawing_justPath_IPathContext];
justDrawing_justPath_SurfaceContext.prototype = {
	moveTo: function(x,y) {
		this.surface.moveTo(x,y);
	}
	,lineTo: function(x,y) {
		this.surface.lineTo(x,y);
	}
	,quadTo: function(x1,y1,x2,y2) {
		this.surface.quadTo(x1,y1,x2,y2);
	}
	,curveTo: function(x1,y1,x2,y2,x3,y3) {
		this.surface.curveTo(x1,y1,x2,y2,x3,y3);
	}
};
var justDrawing_justPath_SvgPath = function(pathContext_) {
	this.sy = 1;
	this.sx = 1;
	this.dy = 0;
	this.dx = 0;
	this.lastY = 0;
	this.lastX = 0;
	this.pathContext = pathContext_;
};
justDrawing_justPath_SvgPath.prototype = {
	parse: function(str_,dx_,dy_,sx_,sy_) {
		if(sy_ == null) {
			sy_ = 1;
		}
		if(sx_ == null) {
			sx_ = 1;
		}
		if(dy_ == null) {
			dy_ = 0;
		}
		if(dx_ == null) {
			dx_ = 0;
		}
		this.str = str_;
		this.dx = dx_;
		this.dy = dy_;
		this.sx = sx_;
		this.sy = sy_;
		this.pos = 0;
		this.l = this.str.length;
		this.c = this.str.charCodeAt(this.pos++);
		this.store = new justDrawing_justPath_StoreF6();
		while(this.pos < this.l) {
			switch(this.c) {
			case 65:
				console.log("elliptical_Arc - not implemented");
				this.extractArgs();
				break;
			case 66:
				console.log("bearing - not implemented");
				throw new js__$Boot_HaxeError("bearing not supported please remove");
				break;
			case 67:
				this.extractArgs();
				this.controlX = this.store.s2;
				this.controlY = this.store.s3;
				this.lastX = this.store.s4;
				this.lastY = this.store.s5;
				this.pathContext.curveTo(this.store.s0,this.store.s1,this.controlX,this.controlY,this.lastX,this.lastY);
				break;
			case 72:
				this.extractArgs(false);
				this.lastX = this.store.s0 * this.sx + this.dx;
				this.pathContext.lineTo(this.lastX,this.lastY);
				break;
			case 76:
				this.extractArgs();
				this.lastX = this.store.s0;
				this.lastY = this.store.s1;
				this.pathContext.lineTo(this.lastX,this.lastY);
				break;
			case 77:
				this.extractArgs();
				this.lastX = this.store.s0;
				this.lastY = this.store.s1;
				this.pathContext.moveTo(this.lastX,this.lastY);
				break;
			case 81:
				this.extractArgs();
				this.controlX = this.store.s0;
				this.controlY = this.store.s1;
				this.lastX = this.store.s2;
				this.lastY = this.store.s3;
				this.pathContext.quadTo(this.controlX,this.controlY,this.lastX,this.lastY);
				break;
			case 83:
				this.extractArgs();
				this.controlX = 2 * this.lastX - this.controlX;
				this.controlY = 2 * this.lastY - this.controlY;
				this.pathContext.curveTo(this.controlX,this.controlY,this.store.s0,this.store.s1,this.store.s2,this.store.s3);
				this.controlX = this.store.s0;
				this.controlY = this.store.s1;
				break;
			case 84:
				this.extractArgs();
				this.controlX = 2 * this.lastX - this.controlX;
				this.controlY = 2 * this.lastY - this.controlY;
				this.lastX = this.store.s0;
				this.lastY = this.store.s1;
				this.pathContext.quadTo(this.controlX,this.controlY,this.lastX,this.lastY);
				break;
			case 86:
				this.extractArgs(false);
				this.lastY = this.store.s0 * this.sy + this.dy;
				this.pathContext.lineTo(this.lastX,this.lastY);
				break;
			case 90:case 122:
				this.lastX = 0;
				this.lastY = 0;
				break;
			case 97:
				console.log("relative elliptical_Arc - not implemented");
				this.extractArgs();
				break;
			case 99:
				this.extractArgs();
				this.controlX = this.store.s2 + this.lastX;
				this.controlY = this.store.s3 + this.lastY;
				var endX = this.store.s4 + this.lastX;
				var endY = this.store.s5 + this.lastY;
				this.pathContext.curveTo(this.store.s0 + this.lastX,this.store.s1 + this.lastY,this.controlX,this.controlY,endX,endY);
				this.lastX = endX;
				this.lastY = endY;
				break;
			case 104:
				this.extractArgs(false);
				this.lastX = this.lastX + this.store.s0 * this.sx + this.dx;
				this.pathContext.lineTo(this.lastX,this.lastY);
				break;
			case 108:
				this.extractArgs();
				this.lastX = this.store.s0 + this.lastX;
				this.lastY = this.store.s1 + this.lastY;
				this.pathContext.lineTo(this.lastX,this.lastY);
				break;
			case 109:
				this.extractArgs();
				this.lastX = this.store.s0 + this.lastX;
				this.lastY = this.store.s1 + this.lastY;
				this.pathContext.moveTo(this.lastX,this.lastY);
				break;
			case 113:
				this.extractArgs();
				this.controlX = this.lastX + this.store.s0;
				this.controlY = this.lastY + this.store.s1;
				this.lastX = this.store.s0 + this.lastX;
				this.lastY = this.store.s1 + this.lastY;
				this.pathContext.quadTo(this.controlX,this.controlY,this.lastX,this.lastY);
				break;
			case 115:
				this.extractArgs();
				this.controlX = 2 * this.lastX - this.controlX;
				this.controlY = 2 * this.lastY - this.controlY;
				var endX1 = this.store.s2 + this.lastX;
				var endY1 = this.store.s3 + this.lastY;
				this.pathContext.curveTo(this.controlX,this.controlY,this.store.s0 + this.lastX,this.store.s1 + this.lastY,endX1,endY1);
				this.controlX = this.store.s0 + this.lastX;
				this.controlY = this.store.s1 + this.lastY;
				this.lastX = endX1;
				this.lastY = endY1;
				break;
			case 116:
				this.extractArgs();
				this.controlX = 2 * this.lastX - this.controlX;
				this.controlY = 2 * this.lastY - this.controlY;
				this.lastX = this.store.s0 + this.lastY;
				this.lastY = this.store.s1 + this.lastX;
				this.pathContext.quadTo(this.controlX,this.controlY,this.lastX,this.lastY);
				break;
			case 118:
				this.extractArgs(false);
				this.lastY = this.lastY + this.store.s0 * this.sy + this.dy;
				this.pathContext.lineTo(this.lastX,this.lastY);
				break;
			default:
			}
			this.c = this.str.charCodeAt(this.pos++);
		}
		return str_;
	}
	,extractArgs: function(process) {
		if(process == null) {
			process = true;
		}
		var _this = this.store;
		_this.l = 0;
		_this.s0 = null;
		_this.s1 = null;
		_this.s2 = null;
		_this.s3 = null;
		_this.s4 = null;
		_this.s5 = null;
		this.c = this.str.charCodeAt(this.pos++);
		var temp = "";
		try {
			while(true) {
				switch(this.c) {
				case 32:case 44:
					if(temp != "") {
						if(temp == "0") {
							temp = "0.1";
						}
						if(process) {
							if((this.store.l & 1) == 0) {
								var _this1 = this.store;
								var v = parseFloat(temp) * this.sx + this.dx;
								switch(_this1.l) {
								case 0:
									_this1.s0 = v;
									break;
								case 1:
									_this1.s1 = v;
									break;
								case 2:
									_this1.s2 = v;
									break;
								case 3:
									_this1.s3 = v;
									break;
								case 4:
									_this1.s4 = v;
									break;
								case 5:
									_this1.s5 = v;
									break;
								default:
								}
								_this1.l++;
							} else {
								var _this2 = this.store;
								var v1 = parseFloat(temp) * this.sy + this.dy;
								switch(_this2.l) {
								case 0:
									_this2.s0 = v1;
									break;
								case 1:
									_this2.s1 = v1;
									break;
								case 2:
									_this2.s2 = v1;
									break;
								case 3:
									_this2.s3 = v1;
									break;
								case 4:
									_this2.s4 = v1;
									break;
								case 5:
									_this2.s5 = v1;
									break;
								default:
								}
								_this2.l++;
							}
						} else {
							var _this3 = this.store;
							var v2 = parseFloat(temp);
							switch(_this3.l) {
							case 0:
								_this3.s0 = v2;
								break;
							case 1:
								_this3.s1 = v2;
								break;
							case 2:
								_this3.s2 = v2;
								break;
							case 3:
								_this3.s3 = v2;
								break;
							case 4:
								_this3.s4 = v2;
								break;
							case 5:
								_this3.s5 = v2;
								break;
							default:
							}
							_this3.l++;
						}
						temp = "";
					}
					break;
				case 45:
					if(temp != "") {
						if(temp == "0") {
							temp = "0.1";
						}
						if(process) {
							if((this.store.l & 1) == 0) {
								var _this4 = this.store;
								var v3 = parseFloat(temp) * this.sx + this.dx;
								switch(_this4.l) {
								case 0:
									_this4.s0 = v3;
									break;
								case 1:
									_this4.s1 = v3;
									break;
								case 2:
									_this4.s2 = v3;
									break;
								case 3:
									_this4.s3 = v3;
									break;
								case 4:
									_this4.s4 = v3;
									break;
								case 5:
									_this4.s5 = v3;
									break;
								default:
								}
								_this4.l++;
							} else {
								var _this5 = this.store;
								var v4 = parseFloat(temp) * this.sy + this.dy;
								switch(_this5.l) {
								case 0:
									_this5.s0 = v4;
									break;
								case 1:
									_this5.s1 = v4;
									break;
								case 2:
									_this5.s2 = v4;
									break;
								case 3:
									_this5.s3 = v4;
									break;
								case 4:
									_this5.s4 = v4;
									break;
								case 5:
									_this5.s5 = v4;
									break;
								default:
								}
								_this5.l++;
							}
						} else {
							var _this6 = this.store;
							var v5 = parseFloat(temp);
							switch(_this6.l) {
							case 0:
								_this6.s0 = v5;
								break;
							case 1:
								_this6.s1 = v5;
								break;
							case 2:
								_this6.s2 = v5;
								break;
							case 3:
								_this6.s3 = v5;
								break;
							case 4:
								_this6.s4 = v5;
								break;
							case 5:
								_this6.s5 = v5;
								break;
							default:
							}
							_this6.l++;
						}
					}
					temp = "-";
					break;
				case 46:
					temp += ".";
					break;
				case 48:
					temp += "0";
					break;
				case 49:
					temp += "1";
					break;
				case 50:
					temp += "2";
					break;
				case 51:
					temp += "3";
					break;
				case 52:
					temp += "4";
					break;
				case 53:
					temp += "5";
					break;
				case 54:
					temp += "6";
					break;
				case 55:
					temp += "7";
					break;
				case 56:
					temp += "8";
					break;
				case 57:
					temp += "9";
					break;
				default:
					if(temp != "") {
						if(temp == "0") {
							temp = "0.1";
						}
						if(process) {
							if((this.store.l & 1) == 0) {
								var _this7 = this.store;
								var v6 = parseFloat(temp) * this.sx + this.dx;
								switch(_this7.l) {
								case 0:
									_this7.s0 = v6;
									break;
								case 1:
									_this7.s1 = v6;
									break;
								case 2:
									_this7.s2 = v6;
									break;
								case 3:
									_this7.s3 = v6;
									break;
								case 4:
									_this7.s4 = v6;
									break;
								case 5:
									_this7.s5 = v6;
									break;
								default:
								}
								_this7.l++;
							} else {
								var _this8 = this.store;
								var v7 = parseFloat(temp) * this.sy + this.dy;
								switch(_this8.l) {
								case 0:
									_this8.s0 = v7;
									break;
								case 1:
									_this8.s1 = v7;
									break;
								case 2:
									_this8.s2 = v7;
									break;
								case 3:
									_this8.s3 = v7;
									break;
								case 4:
									_this8.s4 = v7;
									break;
								case 5:
									_this8.s5 = v7;
									break;
								default:
								}
								_this8.l++;
							}
						} else {
							var _this9 = this.store;
							var v8 = parseFloat(temp);
							switch(_this9.l) {
							case 0:
								_this9.s0 = v8;
								break;
							case 1:
								_this9.s1 = v8;
								break;
							case 2:
								_this9.s2 = v8;
								break;
							case 3:
								_this9.s3 = v8;
								break;
							case 4:
								_this9.s4 = v8;
								break;
							case 5:
								_this9.s5 = v8;
								break;
							default:
							}
							_this9.l++;
						}
						temp = "";
					}
					this.pos--;
					throw "__break__";
				}
				this.c = this.str.charCodeAt(this.pos++);
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
	}
	,nextChar: function() {
		return this.str.charCodeAt(this.pos++);
	}
};
var testjustDrawing_Draw = function() { };
testjustDrawing_Draw.testing = function(surface) {
	console.log("draw white background");
	surface.beginFill(16777215,1.);
	surface.lineStyle(2.,16711680,1.);
	surface.drawRect(1,1,1022,766);
	surface.endFill();
	console.log("draw red circle with a blue outline");
	surface.beginFill(16711680,1.);
	surface.lineStyle(2.,255,1.);
	surface.drawCircle(100,100,30);
	surface.endFill();
	console.log("draw a yellow equilateral triangle with green outline");
	surface.beginFill(16776960,1.);
	surface.lineStyle(2.,65280,1.);
	surface.drawEquilaterialTri(300,100,30,-Math.PI / 2);
	surface.endFill();
	console.log("draw a purple rectangle with orange outline");
	surface.beginFill(5577355,1.);
	surface.lineStyle(2.,16753920,1.);
	surface.drawRect(70,270,60,60);
	surface.endFill();
	console.log("heart quadratic curves");
	surface.beginFill(12702216,1.);
	surface.lineStyle(5.,3464669,1.);
	surface.moveTo(273,280);
	surface.quadTo(285,270,300,285);
	surface.quadTo(315,270,327,280);
	surface.quadTo(334,295,320,306);
	surface.quadTo(325,300,300,330);
	surface.quadTo(275,300,280,306);
	surface.quadTo(266,295,272,280);
	surface.endFill();
	console.log("heart cubic curves");
	surface.beginFill(2749696,1.);
	surface.lineStyle(5.,16056434,1.);
	surface.moveTo(490,78);
	surface.curveTo(490.,76.5,487.5,70.5,477.5,70.5);
	surface.curveTo(462.5,70.5,462.5,89.25,462.5,89.25);
	surface.curveTo(462.5,98.,472.5,109.,490.,118.);
	surface.curveTo(507.5,109.,517.5,98.,517.5,89.25);
	surface.curveTo(517.5,89.25,517.5,70.5,502.5,70.5);
	surface.curveTo(495.,70.5,490.,76.5,490.,78.);
	surface.endFill();
	var p = new justDrawing_justPath_SvgPath(new justDrawing_justPath_SurfaceContext(surface));
	surface.beginFill(13421772,0.5);
	surface.lineStyle(1.,6710886,1.);
	p.parse(testjustDrawing_Draw.bird_d,0,0);
	surface.endFill();
};
testjustDrawing_Draw.whiteBackground = function(surface) {
	console.log("draw white background");
	surface.beginFill(16777215,1.);
	surface.lineStyle(2.,16711680,1.);
	surface.drawRect(1,1,1022,766);
	surface.endFill();
};
testjustDrawing_Draw.redCircleBlueOutline = function(surface) {
	console.log("draw red circle with a blue outline");
	surface.beginFill(16711680,1.);
	surface.lineStyle(2.,255,1.);
	surface.drawCircle(100,100,30);
	surface.endFill();
};
testjustDrawing_Draw.yellowEquilateralTriangleGreenOutline = function(surface) {
	console.log("draw a yellow equilateral triangle with green outline");
	surface.beginFill(16776960,1.);
	surface.lineStyle(2.,65280,1.);
	surface.drawEquilaterialTri(300,100,30,-Math.PI / 2);
	surface.endFill();
};
testjustDrawing_Draw.purpleRectangleOrangeOutline = function(surface) {
	console.log("draw a purple rectangle with orange outline");
	surface.beginFill(5577355,1.);
	surface.lineStyle(2.,16753920,1.);
	surface.drawRect(70,270,60,60);
	surface.endFill();
};
testjustDrawing_Draw.quadraticHeart = function(surface) {
	console.log("heart quadratic curves");
	surface.beginFill(12702216,1.);
	surface.lineStyle(5.,3464669,1.);
	surface.moveTo(273,280);
	surface.quadTo(285,270,300,285);
	surface.quadTo(315,270,327,280);
	surface.quadTo(334,295,320,306);
	surface.quadTo(325,300,300,330);
	surface.quadTo(275,300,280,306);
	surface.quadTo(266,295,272,280);
	surface.endFill();
};
testjustDrawing_Draw.cubicHeart = function(surface) {
	console.log("heart cubic curves");
	surface.beginFill(2749696,1.);
	surface.lineStyle(5.,16056434,1.);
	surface.moveTo(490,78);
	surface.curveTo(490.,76.5,487.5,70.5,477.5,70.5);
	surface.curveTo(462.5,70.5,462.5,89.25,462.5,89.25);
	surface.curveTo(462.5,98.,472.5,109.,490.,118.);
	surface.curveTo(507.5,109.,517.5,98.,517.5,89.25);
	surface.curveTo(517.5,89.25,517.5,70.5,502.5,70.5);
	surface.curveTo(495.,70.5,490.,76.5,490.,78.);
	surface.endFill();
};
testjustDrawing_Draw.drawKiwi = function(surface) {
	var p = new justDrawing_justPath_SvgPath(new justDrawing_justPath_SurfaceContext(surface));
	surface.beginFill(13421772,0.5);
	surface.lineStyle(1.,6710886,1.);
	p.parse(testjustDrawing_Draw.bird_d,0,0);
	surface.endFill();
};
var testjustDrawing_MainCanvas = function() {
	var this1;
	var canvas = window.document.createElement("canvas");
	var style = canvas.style;
	style.paddingLeft = "0px";
	style.paddingTop = "0px";
	style.left = "0px";
	style.top = "0px";
	style.position = "absolute";
	this1 = canvas;
	var canvas1 = this1;
	canvas1.width = 1024;
	canvas1.height = 768;
	window.document.body.appendChild(canvas1);
	testjustDrawing_Draw.testing(new justDrawing_Surface(canvas1.getContext("2d",null)));
};
testjustDrawing_MainCanvas.main = function() {
	new testjustDrawing_MainCanvas();
};
justDrawing_Surface.cubicStep = 0.03;
testjustDrawing_Draw.fillAlpha = 1.;
testjustDrawing_Draw.lineAlpha = 1.;
testjustDrawing_Draw.bird_d = "M210.333,65.331C104.367,66.105-12.349,150.637,1.056,276.449c4.303,40.393,18.533,63.704,52.171,79.03c36.307,16.544,57.022,54.556,50.406,112.954c-9.935,4.88-17.405,11.031-19.132,20.015c7.531-0.17,14.943-0.312,22.59,4.341c20.333,12.375,31.296,27.363,42.979,51.72c1.714,3.572,8.192,2.849,8.312-3.078c0.17-8.467-1.856-17.454-5.226-26.933c-2.955-8.313,3.059-7.985,6.917-6.106c6.399,3.115,16.334,9.43,30.39,13.098c5.392,1.407,5.995-3.877,5.224-6.991c-1.864-7.522-11.009-10.862-24.519-19.229c-4.82-2.984-0.927-9.736,5.168-8.351l20.234,2.415c3.359,0.763,4.555-6.114,0.882-7.875c-14.198-6.804-28.897-10.098-53.864-7.799c-11.617-29.265-29.811-61.617-15.674-81.681c12.639-17.938,31.216-20.74,39.147,43.489c-5.002,3.107-11.215,5.031-11.332,13.024c7.201-2.845,11.207-1.399,14.791,0c17.912,6.998,35.462,21.826,52.982,37.309c3.739,3.303,8.413-1.718,6.991-6.034c-2.138-6.494-8.053-10.659-14.791-20.016c-3.239-4.495,5.03-7.045,10.886-6.876c13.849,0.396,22.886,8.268,35.177,11.218c4.483,1.076,9.741-1.964,6.917-6.917c-3.472-6.085-13.015-9.124-19.18-13.413c-4.357-3.029-3.025-7.132,2.697-6.602c3.905,0.361,8.478,2.271,13.908,1.767c9.946-0.925,7.717-7.169-0.883-9.566c-19.036-5.304-39.891-6.311-61.665-5.225c-43.837-8.358-31.554-84.887,0-90.363c29.571-5.132,62.966-13.339,99.928-32.156c32.668-5.429,64.835-12.446,92.939-33.85c48.106-14.469,111.903,16.113,204.241,149.695c3.926,5.681,15.819,9.94,9.524-6.351c-15.893-41.125-68.176-93.328-92.13-132.085c-24.581-39.774-14.34-61.243-39.957-91.247c-21.326-24.978-47.502-25.803-77.339-17.365c-23.461,6.634-39.234-7.117-52.98-31.273C318.42,87.525,265.838,64.927,210.333,65.331zM445.731,203.01c6.12,0,11.112,4.919,11.112,11.038c0,6.119-4.994,11.111-11.112,11.111s-11.038-4.994-11.038-11.111C434.693,207.929,439.613,203.01,445.731,203.01z";
testjustDrawing_MainCanvas.main();
})();
