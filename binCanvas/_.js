// Generated by Haxe 3.4.0 (git build development @ 4a40be3)
(function () { "use strict";
var HxOverrides = function() { };
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
var Std = function() { };
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringTools = function() { };
StringTools.hex = function(n,digits) {
	var s = "";
	while(true) {
		s = "0123456789ABCDEF".charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var htmlHelper_canvas__$CanvasWrapper_CanvasWrapper_$Impl_$ = {};
htmlHelper_canvas__$CanvasWrapper_CanvasWrapper_$Impl_$._new = function(e) {
	var this1;
	if(e == null) {
		var canvas = window.document.createElement("canvas");
		var style = canvas.style;
		style.paddingLeft = "0px";
		style.paddingTop = "0px";
		style.left = "0px";
		style.top = "0px";
		style.position = "absolute";
		this1 = canvas;
	} else {
		this1 = e;
	}
	return this1;
};
htmlHelper_canvas__$CanvasWrapper_CanvasWrapper_$Impl_$.create = function() {
	var canvas = window.document.createElement("canvas");
	var style = canvas.style;
	style.paddingLeft = "0px";
	style.paddingTop = "0px";
	style.left = "0px";
	style.top = "0px";
	style.position = "absolute";
	return canvas;
};
htmlHelper_canvas__$CanvasWrapper_CanvasWrapper_$Impl_$.set_x = function(this1,x_) {
	this1.style.left = (x_ == null ? "null" : "" + x_) + "px";
	return x_;
};
htmlHelper_canvas__$CanvasWrapper_CanvasWrapper_$Impl_$.get_x = function(this1) {
	var style = this1.style;
	return Std.parseInt(style.left.substr(0,style.left.length - 2));
};
htmlHelper_canvas__$CanvasWrapper_CanvasWrapper_$Impl_$.set_y = function(this1,y_) {
	this1.style.left = (y_ == null ? "null" : "" + y_) + "px";
	return y_;
};
htmlHelper_canvas__$CanvasWrapper_CanvasWrapper_$Impl_$.get_y = function(this1) {
	var style = this1.style;
	return Std.parseInt(style.top.substr(0,style.top.length - 2));
};
var justDrawing_Surface = function(graphics_) {
	this.inFill = false;
	this.prevY = 0;
	this.prevX = 0;
	this.graphics = graphics_;
	this.inFill = false;
};
justDrawing_Surface.getColor = function(col,alpha) {
	var str;
	if(alpha != null && alpha != 1.0) {
		str = "rgba(" + (col >> 16 & 255) + "," + (col >> 8 & 255) + "," + (col & 255) + "," + alpha + ")";
	} else {
		str = "#" + StringTools.hex(col,6);
	}
	return str;
};
justDrawing_Surface.arcTan = function(p0,p1) {
	return Math.atan2(p1.y - p0.y,p1.x - p0.x);
};
justDrawing_Surface.distance = function(p0,p1) {
	var x = p0.x - p1.x;
	var y = p0.y - p1.y;
	return Math.sqrt(x * x + y * y);
};
justDrawing_Surface.quadraticBezier = function(t,arr) {
	var u = 1 - t;
	var u1 = 1 - t;
	return { x : Math.pow(u,2) * arr[0].x + 2 * u * t * arr[1].x + Math.pow(t,2) * arr[2].x, y : Math.pow(u1,2) * arr[0].y + 2 * u1 * t * arr[1].y + Math.pow(t,2) * arr[2].y};
};
justDrawing_Surface._quadraticBezier = function(t,startPoint,controlPoint,endPoint) {
	var u = 1 - t;
	return Math.pow(u,2) * startPoint + 2 * u * t * controlPoint + Math.pow(t,2) * endPoint;
};
justDrawing_Surface.cubicBezier = function(t,arr) {
	var u = 1 - t;
	var u1 = 1 - t;
	return { x : Math.pow(u,3) * arr[0].x + 3 * Math.pow(u,2) * t * arr[1].x + 3 * u * Math.pow(t,2) * arr[2].x + Math.pow(t,3) * arr[3].x, y : Math.pow(u1,3) * arr[0].y + 3 * Math.pow(u1,2) * t * arr[1].y + 3 * u1 * Math.pow(t,2) * arr[2].y + Math.pow(t,3) * arr[3].y};
};
justDrawing_Surface._cubicBezier = function(t,startPoint,controlPoint1,controlPoint2,endPoint) {
	var u = 1 - t;
	return Math.pow(u,3) * startPoint + 3 * Math.pow(u,2) * t * controlPoint1 + 3 * u * Math.pow(t,2) * controlPoint2 + Math.pow(t,3) * endPoint;
};
justDrawing_Surface.prototype = {
	clear: function() {
		this.graphics.clearRect(0,0,this.width,this.height);
	}
	,lineStyle: function(thick,color,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
		this.thickness = thick;
		this.lineColor = color;
		this.lineAlpha = alpha;
		this.graphics.lineWidth = thick;
		var col = this.lineColor;
		var alpha1 = this.lineAlpha;
		var str;
		if(alpha1 != null && alpha1 != 1.0) {
			str = "rgba(" + (col >> 16 & 255) + "," + (col >> 8 & 255) + "," + (col & 255) + "," + alpha1 + ")";
		} else {
			str = "#" + StringTools.hex(col,6);
		}
		this.graphics.strokeStyle = str;
	}
	,beginFill: function(color,alpha) {
		this.fillColor = color;
		this.fillAlpha = alpha;
		this.inFill = true;
		var col = this.fillColor;
		var alpha1 = this.fillAlpha;
		var str;
		if(alpha1 != null && alpha1 != 1.0) {
			str = "rgba(" + (col >> 16 & 255) + "," + (col >> 8 & 255) + "," + (col & 255) + "," + alpha1 + ")";
		} else {
			str = "#" + StringTools.hex(col,6);
		}
		this.graphics.fillStyle = str;
		this.graphics.beginPath();
	}
	,endFill: function() {
		this.inFill = false;
		this.graphics.stroke();
		this.graphics.closePath();
		this.graphics.fill();
	}
	,moveTo: function(x,y) {
		this.prevX = x;
		this.prevY = y;
		this.graphics.beginPath();
		this.graphics.moveTo(x,y);
	}
	,lineTo: function(x,y) {
		this.graphics.lineTo(x,y);
		this.graphics.closePath();
		this.graphics.stroke();
		this.prevX = x;
		this.prevY = y;
	}
	,curveTo: function(x1,y1,x2,y2,x3,y3) {
		this.graphics.bezierCurveTo(x1,y1,x2,y2,x3,y3);
		this.graphics.stroke();
	}
	,quadTo: function(cx,cy,ax,ay) {
		this.graphics.quadraticCurveTo(cx,cy,ax,ay);
		this.graphics.stroke();
	}
	,drawCircle: function(cx,cy,radius) {
		this.graphics.beginPath();
		this.graphics.arc(cx,cy,radius,0,2 * Math.PI,false);
		this.graphics.stroke();
		this.graphics.closePath();
	}
	,drawRect: function(x,y,width,height) {
		this.graphics.beginPath();
		this.graphics.moveTo(x,y);
		this.graphics.lineTo(x + width,y);
		this.graphics.lineTo(x + width,y + height);
		this.graphics.lineTo(x,y + height);
		this.graphics.stroke();
		this.graphics.closePath();
	}
	,drawEquilaterialTri: function(x,y,radius,direction) {
		var third = Math.PI * 2 / 3;
		var points = [];
		var x1;
		var y1;
		var _g = 0;
		while(_g < 3) {
			var i = _g++;
			x1 = x + radius * Math.cos(direction + i * third);
			y1 = y + radius * Math.sin(direction + i * third);
			points.push(x1);
			points.push(y1);
		}
		this.drawTri(points);
	}
	,drawTri: function(points) {
		this.graphics.beginPath();
		var i = 0;
		while(i < points.length) {
			if(i == 0) {
				this.graphics.moveTo(points[i],points[i + 1]);
			} else {
				this.graphics.lineTo(points[i],points[i + 1]);
			}
			i += 2;
		}
		this.graphics.stroke();
		this.graphics.closePath();
	}
};
var testjustDrawing_Draw = function() { };
testjustDrawing_Draw.testing = function(surface) {
	console.log("draw white background");
	surface.beginFill(16777215,1.);
	surface.lineStyle(2.,16711680,1.);
	surface.drawRect(1,1,1022,766);
	surface.endFill();
	console.log("draw red circle with a blue outline");
	surface.beginFill(16711680,1.);
	surface.lineStyle(2.,255,1.);
	surface.drawCircle(100,100,30);
	surface.endFill();
	console.log("draw a yellow equilateral triangle with green outline");
	surface.beginFill(16776960,1.);
	surface.lineStyle(2.,65280,1.);
	surface.drawEquilaterialTri(300,100,30,-Math.PI / 2);
	surface.endFill();
	console.log("draw a purple rectangle with orange outline");
	surface.beginFill(5577355,1.);
	surface.lineStyle(2.,16753920,1.);
	surface.drawRect(70,270,60,60);
	surface.endFill();
	console.log("heart quadratic curves");
	surface.beginFill(12702216,1.);
	surface.lineStyle(5.,3464669,1.);
	surface.moveTo(273,280);
	surface.quadTo(285,270,300,285);
	surface.quadTo(315,270,327,280);
	surface.quadTo(334,295,320,306);
	surface.quadTo(325,300,300,330);
	surface.quadTo(275,300,280,306);
	surface.quadTo(266,295,272,280);
	surface.endFill();
	console.log("heart cubic curves");
	surface.beginFill(2749696,1.);
	surface.lineStyle(5.,16056434,1.);
	surface.moveTo(490,78);
	surface.curveTo(490.,76.5,487.5,70.5,477.5,70.5);
	surface.curveTo(462.5,70.5,462.5,89.25,462.5,89.25);
	surface.curveTo(462.5,98.,472.5,109.,490.,118.);
	surface.curveTo(507.5,109.,517.5,98.,517.5,89.25);
	surface.curveTo(517.5,89.25,517.5,70.5,502.5,70.5);
	surface.curveTo(495.,70.5,490.,76.5,490.,78.);
	surface.endFill();
};
testjustDrawing_Draw.whiteBackground = function(surface) {
	console.log("draw white background");
	surface.beginFill(16777215,1.);
	surface.lineStyle(2.,16711680,1.);
	surface.drawRect(1,1,1022,766);
	surface.endFill();
};
testjustDrawing_Draw.redCircleBlueOutline = function(surface) {
	console.log("draw red circle with a blue outline");
	surface.beginFill(16711680,1.);
	surface.lineStyle(2.,255,1.);
	surface.drawCircle(100,100,30);
	surface.endFill();
};
testjustDrawing_Draw.yellowEquilateralTriangleGreenOutline = function(surface) {
	console.log("draw a yellow equilateral triangle with green outline");
	surface.beginFill(16776960,1.);
	surface.lineStyle(2.,65280,1.);
	surface.drawEquilaterialTri(300,100,30,-Math.PI / 2);
	surface.endFill();
};
testjustDrawing_Draw.purpleRectangleOrangeOutline = function(surface) {
	console.log("draw a purple rectangle with orange outline");
	surface.beginFill(5577355,1.);
	surface.lineStyle(2.,16753920,1.);
	surface.drawRect(70,270,60,60);
	surface.endFill();
};
testjustDrawing_Draw.quadraticHeart = function(surface) {
	console.log("heart quadratic curves");
	surface.beginFill(12702216,1.);
	surface.lineStyle(5.,3464669,1.);
	surface.moveTo(273,280);
	surface.quadTo(285,270,300,285);
	surface.quadTo(315,270,327,280);
	surface.quadTo(334,295,320,306);
	surface.quadTo(325,300,300,330);
	surface.quadTo(275,300,280,306);
	surface.quadTo(266,295,272,280);
	surface.endFill();
};
testjustDrawing_Draw.cubicHeart = function(surface) {
	console.log("heart cubic curves");
	surface.beginFill(2749696,1.);
	surface.lineStyle(5.,16056434,1.);
	surface.moveTo(490,78);
	surface.curveTo(490.,76.5,487.5,70.5,477.5,70.5);
	surface.curveTo(462.5,70.5,462.5,89.25,462.5,89.25);
	surface.curveTo(462.5,98.,472.5,109.,490.,118.);
	surface.curveTo(507.5,109.,517.5,98.,517.5,89.25);
	surface.curveTo(517.5,89.25,517.5,70.5,502.5,70.5);
	surface.curveTo(495.,70.5,490.,76.5,490.,78.);
	surface.endFill();
};
var testjustDrawing_MainCanvas = function() {
	var this1;
	var canvas = window.document.createElement("canvas");
	var style = canvas.style;
	style.paddingLeft = "0px";
	style.paddingTop = "0px";
	style.left = "0px";
	style.top = "0px";
	style.position = "absolute";
	this1 = canvas;
	var canvas1 = this1;
	canvas1.width = 1024;
	canvas1.height = 768;
	window.document.body.appendChild(canvas1);
	testjustDrawing_Draw.testing(new justDrawing_Surface(canvas1.getContext("2d",null)));
};
testjustDrawing_MainCanvas.main = function() {
	new testjustDrawing_MainCanvas();
};
justDrawing_Surface.cubicStep = 0.03;
testjustDrawing_Draw.fillAlpha = 1.;
testjustDrawing_Draw.lineAlpha = 1.;
testjustDrawing_MainCanvas.main();
})();
